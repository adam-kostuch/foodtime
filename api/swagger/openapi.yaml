openapi: 3.0.1
info:
  title: Foodtime API
  description: >-
    Foodtime API allows to handle user connection, tokens and allows them to make food topics
  version: 0.0.1
  contact:
    name: Adam Kostuch
    url: https://www.linkedin.com/in/adam-kostuch/
    email: adamkostuch.krakow@gmail.com

tags:
  - name: Auth
    description: Authorization method handled by JWT.
  - name: Users
    description: User handling endpoints for authorization.
  - name: Food
    description: Posts with recopies form the forum.

paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Creates access token
      description: Returns access token with refresh token that allows user to perform actions.
      operationId: createToken
      requestBody:
        description: String that specifies the user unique ID.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Tokens generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth:
                    items:
                      $ref: '#/components/schemas/AuthTokens'
        '500':
          description: 'Unknown server error'
        'default':
          description: 'Bad request'
  /auth/refresh:
    get:
      tags:
        - Auth
      summary: Regenerated access token
      description: Returns new access token with refresh token that allows user to perform actions.
      operationId: regenerateToken
      requestBody:
        description: String that specifies the user unique ID.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Tokens regenerated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth:
                    items:
                      $ref: '#/components/schemas/AuthTokens'
        '500':
          description: 'Unknown server error'
        'default':
          description: 'Bad request'

  /users:
    post:
      tags:
        - Users
      summary: Creates user
      description: Create users from provided request.
      operationId: insertUser
      requestBody:
        description: Object with the information about new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User has been successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: uuid
                    description: Unique user ID auto generated by mongodb.
                    example: 652ee7f61faebe00124f95cd
        'default':
          description: 'Bad request'
    get:
      tags:
        - Users
      summary: List users
      description: List all of the users registered with simple pagination (Requires ADMIN permissions).
      operationId: listUsers
      parameters:
        - in: query
          name: limit
          description: Limits the amount of returned users.
          required: false
          schema:
            type: integer
          example: limit=50
        - in: query
          name: page
          description: Specifies which page of users should be displayed.
          required: false
          schema:
            type: integer
          example: page=4
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        'default':
          description: 'Bad request'
  /users/:userId:
    get:
      tags:
        - Users
      summary: Finds user by it's id
      description: One specific row of user specified by his uuid.
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User found successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    items:
                      $ref: '#/components/schemas/User'
        'default':
          description: 'Bad request'
    patch:
      tags:
        - Users
      summary: Updates user by it's id
      description: One specific row of user specified by his uuid.
      operationId: patchUser
      requestBody:
        description: Object with updated information about the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User updated successfully.
        'default':
          description: 'Bad request'
    delete:
      tags:
        - Users
      summary: Deletes user by it's id
      description: Removes all of the information about the user from the system.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User removed successfully.
        'default':
          description: 'Bad request'

  /food/recipes:
    post:
      tags:
        - Food
      summary: Creates recipe
      description: Create recipe from provided request.
      operationId: insertRecipe
      requestBody:
        description: Object with the information about new recipe.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: Recipe has been successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: uuid
                    description: Unique user ID auto generated by mongodb.
                    example: 652ee7f61faebe00124f95cd
        'default':
          description: 'Bad request'
    get:
      tags:
        - Food
      summary: List recipes
      description: List all of the recipes registered with simple pagination.
      operationId: listRecipes
      parameters:
        - in: query
          name: limit
          description: Limits the amount of returned users.
          required: false
          schema:
            type: integer
          example: limit=50
        - in: query
          name: page
          description: Specifies which page of users should be displayed.
          required: false
          schema:
            type: integer
          example: page=4
      responses:
        '200':
          description: A list of recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
        'default':
          description: 'Bad request'
  /food/recipes/:recipeId:
    get:
      tags:
        - Food
      summary: Finds recipe by it's id
      description: One specific row of user specified by his uuid.
      operationId: getRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeId'
      responses:
        '200':
          description: Recipe found successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    items:
                      $ref: '#/components/schemas/Recipe'
        'default':
          description: 'Bad request'
    patch:
      tags:
        - Food
      summary: Updates recipe by it's id
      description: One specific row of recipe specified by his uuid.
      operationId: patchRecipe
      requestBody:
        description: Object with updated information about the recipe.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      parameters:
        - $ref: '#/components/parameters/RecipeId'
      responses:
        '204':
          description: Recipe updated successfully.
        'default':
          description: 'Bad request'
    delete:
      tags:
        - Food
      summary: Deletes recipe by it's id
      description: Removes all of the information about the recipe from the system.
      operationId: deleteRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeId'
      responses:
        '200':
          description: Recipe removed successfully.
        'default':
          description: 'Bad request'

components:
  parameters:
    UserId:
      in: path
      name: userId
      description: User specific unique ID.
      required: true
      schema:
        type: string
        format: uuid

    RecipeId:
      in: path
      name: recipe
      description: Recipe specific unique ID.
      required: true
      schema:
        type: string
        format: uid

  schemas:
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
          description: Token that allows to perform user actions.
          example: JWT652ee7f61faebe00124f95cd=+WemdEoNbZ9MYOl33obYej4iAF0qc9FQ==
        refreshToken:
          type: string
          format: JWT
          description: Token that allows user to regenerate access token.
          example: Ref3214JWT652ee7f61faebe00124f95cd=+WemdEoNbZ9MYOl33obYej4iAF0qc9FQ==
    UserId:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: User specific unique ID.
          example: 652ee7f61faebe00124f95cd

    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: Unique user ID auto generated by mongodb.
          example: 652ee7f61faebe00124f95cd
        firstName:
          type: string
          description: Users described first name.
          example: Adam
        lastName:
          type: string
          description: Users described last name.
          example: Kostuch
        email:
          type: string
          format: email
          description: User described email address.
          example: adamkostuch@student.agh.edu.pl
        password:
          type: string
          format: password
          description: User described password, encrypted with base64 encoder.
          example: +ouBjbisDZOxQ8SbVZLJTw==$fAoH1ZCC4yilvMnZ8qxNTDdHKiMBYJVDA/RNiubSkQFEMYVoJTKGsh+WemdEoNbZ9MYOl33obYej4iAF0qc9FQ==
        permissionLevel:
          type: integer
          description: Permission level to judge users permissions.
          example: 2

    Recipe:
      type: object
      properties:
        _id:
          type: string
          format: uid
          description: Unique recipe ID auto generated by mongodb.
          example: 652ee7f61faebe00124f95cd
        title:
          type: string
          description: Title of the food post / recipe / dish.
          example: Onion Soup.
        ingredients:
          type: array
          format: Array<string>
          description: Array of string with the information about ingredients and their amounts.
          example: "['onion: 1kg', 'garlic: 1 clove']"
        imageUrl:
          type: string
          format: url
          description: URL to the main image.
          example: https://agh.edu.pl/images/12341
        instructions:
          type: string
          description: User specified recipe instructions to follow.
          example: Chop some onion and garlic, then add some spices and to the pot for the rest of the day.
        permissionLevel:
          type: string
          description: Additional notes besides the instructions.
          example: Don't overcook!
        authorName:
          type: string
          description: Full name of the author of the recipe.
          example: Adam Kostuch
        estimatedTime:
          type: string
          description: User specified amount total time of cooking the dish.
          example: 4 hours
        category:
          type: string
          description: Category of the dish, for specific diets.
          example: Vegetarian
        caloriesPerPortion:
          type: number
          description: Amount of calories per serving (in kilocalories).
          example: 400
        amountOfPortions:
          type: number
          description: User specified amount of the dish portions.
          example: 4
